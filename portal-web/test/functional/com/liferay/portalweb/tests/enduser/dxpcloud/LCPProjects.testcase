@component-name = "dxp-cloud"
definition {

	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		LCPUtils.launchLCP();

		LCPAuthentication.login();
	}

	tearDown {
		LCPAuthentication.logout();
	}

	@description = "Can create a new project"
	@priority = "5"
	test CanCreateAndDeleteNewProject {
		task ("Create a project and assert the success message") {
			LCPProjectsPage.createNewProject(projectName = "projdxp");

			AssertElementPresent(locator1 = "LCPProjects#ALERT_CREATED_NEW_PROJECT");
		}

		task ("Go back to projects page and open the new environment") {
			Navigator.openSpecificURL(url = "https://console.liferay.coffee/projects");

			LCPProjectsPage.openEnvironment(environmentName = "projdxp");
		}

		task ("Delete new environment") {
			LCPSettingsPage.deleteEnvironment(category = "Settings");

			AssertElementPresent(locator1 = "LCPSettings#ALERT_PREJECT_DELETED");

			AssertElementNotPresent(
				key_environment = "projdxp",
				locator1 = "LCPProjects#PROJECT_ROW");
		}
	}

	@description = "Can check the environment information on the project page"
	@priority = "5"
	test CanVerifyEnvironmentInformationOnProjectPage {
		task ("Assert environment type") {
			for (var type : list "DEV,INFRA,PRD") {
				AssertElementPresent(
					key_environmentType = "${type}",
					key_projectName = "projtest",
					locator1 = "LCPProjects#ENVIRONMENT_TYPE");
			}
		}

		task ("Assert environments status") {
			AssertTextEquals(
				key_environment = "projtest-dev",
				locator1 = "LCPProjects#ENVIRONMENT_STATUS",
				value1 = "Ready");

			AssertTextEquals(
				key_environment = "projtest-infra",
				locator1 = "LCPProjects#ENVIRONMENT_STATUS",
				value1 = "Ready");

			AssertTextEquals(
				key_environment = "projtest-prd",
				locator1 = "LCPProjects#ENVIRONMENT_STATUS",
				value1 = "None");
		}

		task ("Assert environment services") {
			for (var serviceName : list "backup,database,liferay,search,webserver") {
				AssertElementPresent(
					key_environment = "projtest-dev",
					key_serviceName = "${serviceName}",
					locator1 = "LCPProjects#ENVIRONMENT_SERVICE");
			}

			AssertElementPresent(
				key_environment = "projtest-infra",
				key_serviceName = "ci",
				locator1 = "LCPProjects#ENVIRONMENT_SERVICE");

			AssertElementPresent(
				key_environment = "projtest-prd",
				locator1 = "LCPProjects#ENVIRONMENT_NO_SERVICES");
		}

		task ("Assert team member") {
			for (var environment : list "projtest-dev,projtest-infra,projtest-prd") {
				AssertElementPresent(
					key_environment = "${environment}",
					key_memberName = "Poshi Tester",
					locator1 = "LCPProjects#ENVIRONMENT_MEMBER");
			}
		}

		task ("Assert project location") {
			for (var environment : list "projtest-dev,projtest-infra,projtest-prd") {
				AssertElementPresent(
					key_environment = "${environment}",
					key_location = "Oregon, USA",
					locator1 = "LCPProjects#ENVIRONMENT_LOCATION");
			}
		}
	}

}