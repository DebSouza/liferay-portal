@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.enabled = "true";
	property minimum.slave.ram = "32";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ACUtils.tearDownDXP();

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}

		ACUtils.tearDownAC();
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8300 | Test Summary: Search for a property when assigning sites to a property"
	@ignore = "true"
	@priority = "5"
	test SearchPropertyToAssignSite {

		// TODO LRAC-8300 SearchPropertyToAssignSite

	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8298 | Test Summary: Site overview search terms shows what keywords are being searched for"
	@priority = "5"
	test ShowsKeywordsBeingSearched {
		task ("Connect DXP to AC") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Search keywords on DXP Search Bar") {
			Navigator.openURL();

			for (var keyword : list "liferay,ac") {
				ContentDashboard.searchValue(webContentTitle = "${keyword}");
			}
		}

		task ("Close sessions") {
			ACUtils.closeAllSessions();

			Pause(locator1 = "30000");
		}

		task ("Navigate to AC workspace") {
			ACUtils.launchAC();
		}

		task ("Switch to new property in AC") {
			ACProperties.switchProperty(propertyName = "${propertyName}");
		}

		task ("Go to sites pages tab") {
			ACNavigation.goToSites();

			ACSites.viewSiteOverviewDashboardCards();
		}

		task ("View the new report") {
			ACCards.viewCards(cardTitle = "Search Terms");

			ACTimeFilter.clickTimeFilterButton(cardName = "Search Terms");

			ACTimeFilter.setLast24Hours();
		}

		task ("Assert Keywords Searched") {
			for (var keyword : list "liferay,ac") {
				AssertElementPresent(
					key_keyword = "${keyword}",
					locator1 = "ACSites#SEARCHED_KEYWORD");
			}
		}
	}

}